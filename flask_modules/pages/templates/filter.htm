<!DOCTYPE html>
{#  Forms to initiate searches, including full-text searching

    Flask-passed parameters:

        site_data
        current_page
        username

        all_labels          List of all the node labels present in the database
                                EXAMPLE: ["my_label_1", "my_label_2"]

        all_categories      A list of dicts.  Note that the 'remarks' and 'pinned' keys may or may not be present.
                                EXAMPLE:
                                    [{"uri": "1",   "name": "HOME", "remarks": "ROOT NODE"},
                                     {"uri: "123",  "name": "Calculus"},
                                     {"uri": "523", "name": "Work at Acme", "pinned": True}]
 #}

<html lang="en">
<head>
    <title>Filter</title>

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/brain_annex.css">

    <link type="text/css" rel="stylesheet" href="/navigation/static/horiz_status_bar.css">
    <link type="text/css" rel="stylesheet" href="/navigation/static/navbar_top.css">

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/node_explorer.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/record_navigator.css">
    <link type="text/css"  rel="stylesheet" href="/BA/pages/static/vue_components/multiselect/multiselect.css">

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/control_panels.css">

    <!-- JavaScript -->
    <script src="/BA/pages/static/Vue2/vue2.js"></script>       <!-- Vue.js (version 2) -->
    <script src="/BA/api/static/server_communication.js"></script>
</head>

<body>

{# HORIZONTAL STATUS BAR (fixed at the top) #}
{% include "horiz_status_bar.htm" %}

<div class="menu-wrapper">
    {# TOP NAVIGATION BAR #}
    {% include "navbar_top.htm" %}
</div>


<h2>Search Notes and Documents</h2>
<i>(retrieve anything that includes ALL the words below; common words ignored)</i><br><br>

<div class="content-block">
    <div class="content-block-title">Search</div>

    <form method='GET' action='search'>
        <br>
        <input type='text' name='words'  size="100" maxlength="225" placeholder="Enter all the words to search for">
        <br><br><br>

        <select name='search_category'  style='font-size:14px'>
            <option value=''>[OPTIONALLY, select Category to restrict search under]</option>
            {% for category in all_categories %}
            <option value='{{category.uri}}'>
                {{category.name}}
                {% if category.remarks %} [{{category.remarks}}] {% endif %}
            </option>
            {% endfor %}
        </select>

        <input type="submit" value="SEARCH">
    </form>

</div>





<br><br><br>

<h2>Search the Database Nodes</h2>


<div id="vue-root-1">   <!-- Container for VUE COMPONENTS : the ROOT of the components below -->






<div class='form-box'>
    <span class='title'>SELECT THE CRITERIA</span><br><br>

    <table border='0' cellspacing='5' cellpadding='0'>
        <!--
        <tr>
            <td>Class Name</td><td><input type="text" size="40" v-model="class_name"></td>
        </tr>
        -->
        <tr>
            <td>Label Name</td>

            <td>
                <select v-model="label" @change='lookup_fields'>
                    <option disabled value=''>[Choose a label]</option>
                       <option v-for="label in {{all_labels}}" v-bind:value="label">
                       [[label]]
                       </option>
                </select>
                <span style="color: gray">REQUIRED</span>
            </td>

        </tr>

        <tr>
            <td style="border-left: 2px solid green; padding-left: 3px;">Key Names</td>
            <td style="padding-top: 10px">
                <!--SELECTED: [[selected_fields]]<br>-->
                <vue-multiselect
                    v-model="selected_fields"
                    v-bind:options=available_fields
                    placeholder="Select option (Pick a label FIRST)"
                    v-bind:multiple="true">
                </vue-multiselect>
                <span class="form-comment" style="display: block; text-align: right">If more than 1 selected from menu, an implicit OR</span>
            </td>
        </tr>

        <tr>
            <td style="border-left: 2px solid green; padding-left: 3px;">Key Name (typed in)</td><td><input type="text" size="50" v-model="key_name">
            <span class="form-comment">If provided, it takes priority over values from menu</span>
            </td>
        </tr>

        <tr>
            <td style="padding-top:20px">Key Value</td>
            <td style="padding-top:20px"><input type="text" size="50" v-model="key_value">
            <span class="form-comment">If text, implicit "Contains" (sub-string)</span>
            <input type="checkbox"  v-model="case_sensitive" style="margin-left:15px">Match Case?
            </td>
        </tr>
        <tr>
            <td>ORDER BY</td><td><input type="text" size="50" v-model="order_by">
            <span class="form-comment">Comma-separated values, each optionally followed by DESC</span>
            </td>
        </tr>
        <tr>
            <td>SKIP</td><td><input type="text" size="2" v-model="skip"></td>
        </tr>
        <tr>
            <td>LIMIT</td><td><input type="text" size="2" v-model="limit"></td>
        </tr>
    </table>

    <br>
    <button @click="submit_query" v-bind:disabled="!label">
        Submit query <span v-if="!label">(MUST pick a label first)</span>
    </button>

</div>  <!-- class='form-box' -->

<p>
    <span v-if="waiting" class="waiting">Retrieving the data...</span>
    <span v-bind:class="{'error-message': error, 'status-message': !error }">[[status_message]]</span>
</p>



<!--  ***  QUERY RESULTS  ***  -->

<p style="color: #888; margin-top:30px; margin-bottom:0">Query result:</p>

<div style="border:1px solid #DDD; padding:10px; background-color: #f4f4f4">

    <p v-if="recordset_summary && (recordset_array.length === 0)" style="color: gray">
        NO ITEMS FOUND
    </p>

    <p v-for="(item, index) in recordset_array"
                style="border: 1px solid #CCC; padding-bottom: 5px; padding-left: 3px; margin-bottom:2px; margin-top:3px;
                       background-color: white"
                v-bind:style="{'margin-left': item.controls.indent * 50 + 'px'}">

        <!-- If applicable, show the record's parentage -->
        <template v-if="item.controls.parent_id !== null">
            <span v-if="item.controls.parent_dir == 'OUT'"
                class="subrecord-out" style="display: inline-block; margin-right:10px">
                <img src='/BA/pages/static/graphics/down_thick_arrow_16_216439.png'>
                [[item.controls.parent_link]]
            </span>
            <span v-else
                class="subrecord-in" style="display: inline-block; margin-right:10px">
                <img src='/BA/pages/static/graphics/thick_up_arrow_16_216098.png'>
                [[item.controls.parent_link]]
            </span>
        </template>

        <!-- Display the data record (with all its fields) -->
        <template v-for="(val, key) in item.data">
             <span style="color:grey; font-size:12px" class="monospace">[[key]]: </span>
             `<span style="background-color: rgb(251, 240, 240)">[[val]]</span>` <span style="color:brown; font-weight: bold">|| </span>
        </template>
        &nbsp;
        <img src="/BA/pages/static/graphics/eye_16_173007.png" title="HIDE" alt="HIDE"
             @click="hide_record(index)" class="clickable-icon">
        &nbsp;

        <span v-if="item.controls.expand" >

            <template v-for="link in item.controls.links">  <!-- Show all the links (inbound and outbound) -->

                <span v-if="link[1]=='IN'" @click="toggle_linked_records(item, link[0], index)"
                      class="clickable-icon relationship-in"
                      v-bind:title="'Show/Hide ' + link[2] + ' inbound link(s) `' + link[0] + '`'"
                >
                    <!-- Inbound link : show the number of links, an icon, and the link's name -->
                    [[ link[2] ]]
                    <img src="/BA/pages/static/graphics/20_inbound_4619661.png" alt="Show/Hide IN-bound links">
                    [[ link[0] ]]
                </span>

                 <span v-else @click="toggle_linked_records(item, link[0], index)"
                      class="clickable-icon relationship-out"
                      v-bind:title="'Show/Hide ' + link[2] + ' outbound link(s) `' + link[0] + '`'"
                 >
                    <!-- Outbound link : show the number of links, an icon, and the link's name -->
                    [[ link[2] ]]
                    <img src="/BA/pages/static/graphics/20_outbound_4619660.png" alt="Show/Hide OUT-bound links">
                    [[ link[0] ]]
                </span>

                &nbsp;
            </template>


            <!-- Arrow to shrink the record, to hide the links -->
            <img src="/BA/pages/static/graphics/arrow_down_22_79479.png" title="Hide LINKS" alt="Hide LINKS"
              @click="toggle_links(item)"
              class="clickable-icon" style="background-color:black">
        </span>

        <!-- Arrow to expand the record, to show the links -->
        <img v-else src="/BA/pages/static/graphics/arrow_right_22_79650.png" title="Show LINKS" alt="Show LINKS"
             @click="toggle_links(item)"
             class="clickable-icon" style="background-color:black">

    </p>


    <p v-if="recordset_summary" style="color:gray">
        <b>[[recordset_array.length]] records found</b> (out of a total of [[recordset_summary]] node(s) with the requested label `[[label]]`)
    </p>

</div>


</div>	<!--  ~~~~~~~~~~~~~~~~~~~~~  END of Vue root element "vue-root-1"  ~~~~~~~~~~~~~~~~~~~~~  -->





<!-- Vue-related code (and other JS).  This must appear AFTER the Vue-containing elements.
     The type="module" must be for imported scripts that in turn contain imports!  In that case,
     the script below must handle both the JS import and the instantiation of Vue, to make sure
     that the former is completed first -->

<script type="module">
// Import the JS module (it will register the component globally - and it will be completed
// prior to the instantiation of Vue, below)
import '/BA/pages/static/vue_components/multiselect/multiselect.js';


// Instantiation of the Vue object (ROOT component) must come last
new Vue({
    el: '#vue-root-1',              // There should be a DIV in the HTML code with this string as id

    delimiters: ['[[', ']]'] ,      // Changing delimiters: requesting double SQUARE brackets for Vue, to avoid interfering with Flask

    data: {     // Global data for the whole page (Vue root element).  This is the handover of data from Flask to Vue

        class_name: "",             // TODO: Not currently used
        label: "",
        key_name: "",
        key_value: "",
        case_sensitive: false,      // Applicable to text-based searches
        order_by: "",
        skip: 0,
        limit: 10,

        next_record_id: 0,

        recordset_summary: "",      // The total count (total number of nodes with requested label in dbase)
        recordset_array: [],        // Each entry is an object with 2 keys: "controls" and "data":
                                    //      "controls" is an array of dicts, with one entry per node (record) returned by the search
                                    //          each entry includes the keys:
                                    //                      "record_id" (int)
                                    //                      "parent_id" (int)
                                    //                      "parent_link" (str)
                                    //                      "parent_dir" (str)
                                    //                      "expand" (bool)
                                    //                      "indent" (int)
                                    //                      "links" (array of triples: name, "IN"/"OUT", count)
                                    //      "data" is an array of dicts, with one entry per node (record) returned by the search
                                    //          each entry contains all the node properties from the database

        available_fields: [],       // Array of field names for dbase node
        selected_fields: null,      // Used by the "multiselect" Vue component

        status_message: "",         // Message for the user about the status of the last operation (NOT used for "waiting" status)
        error: false,               // Whether the last server communication resulted in error
        waiting: false              // Whether any server request is still pending
    },


    // ---------------------  METHODS  ----------------------

    methods:  {
        lookup_fields()
        /* Invoked when the user selects, from a pulldown menu, a dbase "label" to use for the search.
           Contact the server to request all the field (property) names
           typically associated with nodes that have that dbase label
         */
        {
            const url_server_api = `/BA/api/field-names-by-class/${this.label}`;

            console.log(`Graph-database label chosen: "${this.label}"`);

            console.log(`About to contact the server at "${url_server_api}"`);

            // Initiate asynchronous contact with the server
            this.waiting = true;
            this.error = false;         // Clear any error from the previous operation
            this.status_message = "";

            ServerCommunication.contact_server(url_server_api,
                    {method: "GET", callback_fn: this.finish_lookup_fields});
        },

        finish_lookup_fields(success, server_payload, error_message, custom_data)
        /* Callback function to wrap up the action of get_data_from_server() upon getting a response from the server.
                success:        boolean indicating whether the server call succeeded
                server_payload: whatever the server returned (stripped of information about the success of the operation)
                error_message:  a string only applicable in case of failure
                custom_data:    whatever JavaScript structure, if any, was passed by the contact_server() call
        */
        {
            console.log("Finalizing the finish_lookup_fields() operation...");

            if (success)  {     // Server reported SUCCESS
                console.log("    server call was successful; it returned: ", server_payload);
                this.status_message = `Operation completed`;
                this.available_fields = server_payload;
            }
            else  {             // Server reported FAILURE
                this.error = true;
            }

            // Final wrap-up, regardless of error or success
            this.waiting = false;      // Make a note that the asynchronous operation has come to an end
        },



        submit_query()
        // Invoked when the user presses the "Submit Query" button, to perform a dbase search
        {
            const url_server_api = "/BA/api/get_filtered";

            var fields_to_search_for = "";

            if (this.key_name)
                fields_to_search_for = this.key_name;           // A manually-typed field name over-rides choices from menu
            else if (this.selected_fields)
                fields_to_search_for = this.selected_fields;    // Lower priority

            var get_obj = {label: this.label,
                           key_name: fields_to_search_for,
                           key_value: this.key_value,
                           case_sensitive: this.case_sensitive,
                           order_by: this.order_by,
                           skip: this.skip,
                           limit: this.limit};

            console.log(`About to contact the server at "${url_server_api}" .  GET object:`);
            console.log(get_obj);

            // Initiate asynchronous contact with the server
            this.waiting = true;
            this.error = false;         // Clear any error from the previous operation
            this.status_message = "";

            ServerCommunication.contact_server(url_server_api,
                    {method: "GET",
                    data_obj: get_obj,
                    json_encode_send: true,
                    callback_fn: this.finish_submit_query});
        },

        finish_submit_query(success, server_payload, error_message)
        // Callback function to wrap up the action of submit_query() upon getting a response from the server
        {
            console.log("Finalizing the submit_query() operation...");

            if (success)  {     // Server reported SUCCESS
                console.log("    server call was successful; it returned: " , server_payload);

                // server_payload is expected to be an object with 2 properties: `total_count` and `recordset`

                this.recordset_summary = server_payload.total_count;

                for (let i = 0; i < server_payload.recordset.length; i++)  {
                    let new_entry = {controls: {
                                                    record_id: this.next_record_id,

                                                    parent_id: null,
                                                    parent_link: null,
                                                    parent_dir: null,

                                                    expand: false,
                                                    indent: 0,
                                                    links: null
                                                },
                                     data: server_payload.recordset[i]
                                     };
                    this.next_record_id += 1;
                    //console.log(`new_entry: ${new_entry.controls}, ${new_entry.data}`);
                    Vue.set(this.recordset_array, i, new_entry);
                }

                this.status_message = `Data successfully retrieved`;
            }
            else  {             // Server reported FAILURE
                this.error = true;
                this.status_message = `FAILED retrieval of data. ${error_message}`;
            }

            // Final wrap-up, regardless of error or success
            this.waiting = false;      // Make a note that the asynchronous operation has come to an end
        },



        hide_record(record_index)
        // Invoked when the user click on the icon next to a record from the search result, to hide it
        {
            console.log(`hide_record() invoked for record with index ${record_index}`);

            // Delete 1 element from the specified index position
            this.recordset_array.splice(record_index, 1);
            //this.search_result.recordset.splice(record_index, 1);
        },



        toggle_linked_records(record, rel_name, index)
        /* Toggle the display of all the records (database nodes)
           that have a relationship by the given name
           to the specified record (node) at the index position
         */
        {
            const parent_id = record.controls.record_id;
            console.log(`parent_id: ${parent_id} | rel_name: "${rel_name} | index: "${index}"`);

            var found = false;
            for (let pos = index+1; pos < this.recordset_array.length; pos++)  {
                console.log(this.recordset_array[pos].controls);
                if (this.recordset_array[pos].controls.parent_id == parent_id
                        &&  this.recordset_array[pos].controls.parent_link == rel_name)  {
                    //alert(`Already shown, at pos ${pos}`);
                    break;
                }
            }

            // TODO: this sample hardwired section to be replaced by a server call
            var n_links;
            if (rel_name == "MARRIED_TO")
                var n_links = 1;
            else
                var n_links = 2;
            if (rel_name == "HAS_ON_PAYROLL")
                var dir = "IN";
            else
                var dir = "OUT";


            for (let counter = 0; counter < n_links; counter++)  {
                // TODO: for now using hardwired sample data; to be replaced with server data
                let new_entry = {controls: {
                                                record_id: this.next_record_id,
                                                expand: false,
                                                indent: record.controls.indent + 1,

                                                parent_id: parent_id,
                                                parent_link: rel_name,
                                                parent_dir: dir
                                            },
                                 data:  {
                                            "A": 123,
                                            "B": "hello world"
                                        }
                                 };
                this.next_record_id += 1;
                console.log(`new_entry: record_id = ${new_entry.controls.record_id}`);
                console.log(new_entry.data);

                const i = this.locate_item(parent_id);
                console.log(`Located parent item at index ${i}`);
                this.recordset_array.splice(i+1, 0, new_entry);
            }
        },


        locate_item(record_id)
        /*
         */
        {
            //console.log(`Attempting to locate content item with record_id '${record_id}'`);

            const number_items = this.recordset_array.length;

            for (var i = 0; i < number_items; i++) {
                if (this.recordset_array[i].controls.record_id == record_id)
                    return i;          //  Found it
            }

            return -1;    // Didn't find it
        },


        toggle_links(record)
        {
            record.controls.expand = !record.controls.expand;

            // TODO: for now, hardwired with arbitrary values; to be populated from server query result
            record.controls.links = [["HAS_ON_PAYROLL", "IN", 2], ["EMPLOYED_BY", "OUT", 2], ["MARRIED_TO", "OUT", 1]];
        }

    } // METHODS

});
</script>


</body>
</html>