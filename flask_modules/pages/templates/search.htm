<!DOCTYPE html>
{#  Used for a search-result page: a NON-EDITABLE version of the viewer page,
    given a list of Content Items
    Vue.js is used for the rendering

    Flask-passed parameters:

        page_header     A string that, if passed, gets prominently shown at the top of the page
                        EXAMPLE:  10 SEARCH RESULT(S) for `boat`

        content_items:  A list of dictionaries.  At present, only used for Content Items of type 'Note'
                        EXAMPLE:
                        [
                         {'basename': 'notes-3460', 'uri': '3460', 'schema_code': 'n', 'title': 'the boat show', 'suffix': 'htm',
                            'internal_id': 3962,
                            'neo4j_labels': ['BA', 'Note'],
                            'internal_links': [{'uri': '966', 'schema_code': 'cat', 'name': "Physics"}]
                         }
                        ]

    TODO: merge with filter.htm
 #}


<html lang="en">
<head>
    <title>Search Results</title>

    <!-- General and module styling -->
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/brain_annex.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/page_viewer.css">

    <link type="text/css" rel="stylesheet" href="/navigation/static/horiz_status_bar.css">
    <link type="text/css" rel="stylesheet" href="/navigation/static/navbar_top.css">

    <!-- Styling for Vue CORE components -->
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/toc_sidebar/toc_sidebar.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/controls/controls.css">

    <!-- PLUGIN-specific styling -->
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/headers/headers.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/images/images.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/documents/documents.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/notes/notes.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/codedocs/codedocs.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/records/records.css">

    <!-- JavaScript -->
    <script src="/BA/pages/static/Vue2/vue2.js"></script>   <!-- Vue.js (version 2) -->
    <script src="/BA/api/static/server_communication.js"></script>
</head>


<body>


<div id="vue-root">   <!-- Container for VUE COMPONENTS  : considered the ROOT of the components below-->


{# HORIZONTAL STATUS BAR (fixed at the top) #}
{% include "horiz_status_bar.htm" %}



<!--   The "scroll-canvas" is the MAIN part of the page,
       incl. the navbar at the top and the sidebox on the right,
       but exclusive of the left sidebar, which is fixed in position.
       If the left sidebar is collapsed, then the "scroll-canvas" needs a different size -->
<div v-bind:class="{ 'scroll-canvas': show_left_sidebar, 'scroll-canvas--collapsed-left': !show_left_sidebar }">



{# TOP NAVIGATION BAR (scrolls with main part of page) #}
{% include "navbar_top.htm" %}




<!-- ****************************************************************

                LEFT side-bar (used for Table of Contents)

     **************************************************************** -->

<vue-toc-sidebar
        v-bind:content_array="content_array"
        v-bind:show_left_sidebar="show_left_sidebar"
        v-bind:show_hide_details="false"

        v-on:adjust-left-sidebar="adjust_left_sidebar($event)"
>
</vue-toc-sidebar>




<div class='lightbox'>


<!-- ****************************************************************

                        TOP OF PAGE

 **************************************************************** -->

{#  Uncomment for DEBUGGING! (to view some of the Flask-passed parameters)
<br>{{content_items}}<br><br><br>
 #}


{% if page_header %}
<p class="headline">{{page_header}}</p>
{% endif %}



{# Give notice if no Content Items were passed #}
{% if (content_items | count == 0) %}
    <p style="margin-top:50px; color:#888">NO SEARCH RESULTS : you may need to re-phrase your search</p>
{% endif %}


<div class="content-block">
    <div class="content-block-title">Search Again</div>
    <form method='GET' action='search'>
        <input type='text' name='words'  size="100" maxlength="225" placeholder="Enter all the words to search for">
        <input type="submit" value="SEARCH">
    </form>
</div>
<br>


<!-- For each Content Item on this page, make use of the appropriate Vue component (picked dynamically).
     Type-specific display is handled by the individual components

     v-bind:key Used to provide unique identifiers for each component
     v-bind:is  Specifies which component to use, based on the type of the Content Item

     Props (arguments) passed to the components
            v-bind:item_data="item"
            v-bind:edit_mode="expose_controls"
            v-bind:category_id="category_id"
     -->
<div v-for="item in content_array">

    <a v-bind:name="item.schema_code + '_' + item.uri"></a>  <!-- Anchor for page scrolling -->
    <br>

    <component
                v-bind:key="item.schema_code + item.uri + item.pos"
                v-bind:is="plugin_component_name(item)"
                v-bind:item_data="item"
                v-bind:edit_mode="expose_controls"
                v-bind:category_id="category_id"
    >
    </component>

    Links: &nbsp; <span v-html="compose_category_links(item)"></span>
    <br><br>
</div>


<br><br>


</div>  <!--  ~~~~~~~~~~~~~~~~~~~~~  END of Vue root element  ~~~~~~~~~~~~~~~~~~~~~  -->



<!-- Icon to scroll to top of page -->
<a id="to_top" href="javascript:;" onclick="window.scrollTo(0, 0)">
    <img src="/BA/pages/static/graphics/to_top_80.png" width="40" height="40"
         alt="Scroll to TOP of page" title="Scroll to TOP of page">
</a>




</div>	<!-- END OF lightbox -->

</div>	<!-- END OF scroll-canvas -->





<!-- Vue-related code (and other JS).  This must appear AFTER the Vue-containing elements
  -->
<script src="/BA/pages/static/vue_components/toc_sidebar/toc_sidebar.js"></script>
<script src="/BA/pages/static/vue_components/controls/controls.js"></script>

<script src="/BA/pages/static/vue_components/PLUGINS/headers/headers.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/images/images.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/documents/documents.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/notes/notes.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/codedocs/codedocs.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/records/records.js"></script>


<script>
// Instantiation must come after the component definition
new Vue({
    el: '#vue-root',

    delimiters: ['[[', ']]'] ,  // Changing delimiters: here we are requesting double SQUARE brackets

    data: {     // Global data for the whole page (Vue root element).  This is the handover of data from Flask to Vue
        content_array: {{content_items | tojson(indent=4)}},
                                        // Array containing objects with the data for all the Content Items on the page
                                        // EXAMPLE: [{"uri":"5","schema_code":"h","pos":0,"text":"GENERAL METHODS"},
                                        //           {"basename":"mypix","schema_code":"i","uri":"8","pos":50,"suffix":"png"}]
        expose_controls: false,         // If true, the editing controls of the various Content Items are revealed
        category_id: 0,                 // TODO: not in use, but (some of?) the components might require it
        show_left_sidebar: true         // If true, the the left sidebar (with the Page Contents) is shown; otherwise, collapsed
    },


    methods:  {

        adjust_left_sidebar(state)
        // If state is true, expand the left sidebar; otherwise, collapse it
        {
            console.log(`Root element received signal to adjust the left sidebar, with state ${state}`);
            this.show_left_sidebar = state;
        },



        compose_category_links(item)
        // TODO: generalize
        {
            var elements = item.internal_links;

            link_str = "";
            for (var i = 0; i < elements.length; i++) {
                el = elements[i];
                link_str += `<a href="viewer/${el.uri}">${el.name}</a> &nbsp;&nbsp; `;
            }

            return link_str;
        },


        locate_item(schema_code, uri)
        /*  Helper function, to locate the specified Content Item in the array of Content Items.
            If found, return its index in the array; otherwise, return -1
            TODO: rename to locate_item_index()
         */
        {
            //console.log(`Attempting to locate content item of type '${schema_code}' , id ${uri}`);

            const number_items = this.content_array.length;

            for (var i = 0; i < number_items; i++) {
                if (this.content_array[i].schema_code == schema_code  &&  this.content_array[i].uri == uri)
                    return i;          //  Found it
            }

            return -1;    // Didn't find it
        },


        locate_item_pos(schema_code, uri, pos)
        /*  Same as locate_item(), but also requiring a match on position
         */
        {
            //console.log(`Attempting to locate content item of type '${schema_code}' , id ${uri}, pos ${pos}`);

            const number_items = this.content_array.length;

            for (var i = 0; i < number_items; i++) {
                if (this.content_array[i].schema_code == schema_code  &&
                    this.content_array[i].uri == uri  &&
                    this.content_array[i].pos == pos)
                    return i;          //  Found it
            }

            return -1;    // Didn't find it
        },


        plugin_component_name(item)
        // Compose the name of the plugin-provided Vue component to handle the given item (based on its type)
        {
            // TODO: make sure that item.schema_code is known, or return a special "generic" type
            return "vue-plugin-" + item.schema_code;
        },


        sort_all_items()
        // Re-arrange the ordering of the Content Items, based on their "pos" attributes
        {
            //alert("sorting!");
            this.content_array.sort( function(a, b) {return a.pos > b.pos} );
        }

    } // METHODS

});
</script>


</body>
</html>