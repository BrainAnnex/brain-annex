<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test of Cytoscape.js</title>
    <style type="text/css">
        #cy {
            width: 600px;
            height: 350px;
            display: block;
            background-color: #f6f6f6;
            border: 1px solid gray;
        }
    </style>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.21.2/cytoscape.umd.js" integrity="sha512-f2pi4FT6LCwl93apc24uOUnAg8FtnkcSI1TLTQ96We8bzniiO8z7+S6qXBthmvJSFORTTjCmQL82MY7Jhi5FVA==" crossorigin="anonymous" referrerpolicy="no-referrer">
    </script>

    <script src="https://cdn.jsdelivr.net/npm/d3-color@3">
    </script>

</head>
<body>

<div id="cy">
<!-- THE GRAPH WILL GO HERE -->
</div>

<script>

    // Mapping the node label to its interior color
    var color_mapping = {
        CLASS: '#8DCC93',
        PROPERTY: '#F79767',
        import: '#4C8EDA'
    };


    var cy = cytoscape({

        container: document.getElementById('cy'),    // container to render in

        elements: [ // list of graph elements (nodes & edges)
            {
                data: { id: 1, name: 'Headers', label: 'CLASS'}
            },
            {
                data: { id: 2, name: 'text', label: 'PROPERTY'}
            },
            {
                data: { id: 3, source: 1, target: 2, name: 'HAS_PROPERTY' }
            }
        ],


        style: [ // the stylesheet for the graph
            {
                selector: 'node',       // NODES
                style: {
                    'width': 60,
                    'height': 60,
                    'label': 'data(name)',
                    //'background-color': '#8DCC93',
                    'background-color': node_color_f,

                    'border-width': 2,
                    //'border-color': '#5db665',
                    'border-color': node_border_color_f,

                    'font-size': '11px',
                    'color': '#101010',        // Color of the text
                    'text-halign': 'center',
                    'text-valign': 'center'
                }
            },

            {
                selector: 'edge',      // RELATIONSHIPS
                style: {
                    'width': 2,
                    'line-color': '#C6C6C6',
                    'target-arrow-color': '#C6C6C6',
                    'target-arrow-shape': 'triangle',
                    'curve-style': 'bezier',
                    'label': 'data(name)',
                    'font-size': '9px',
                    'color': '#000',    // Color of the text
                    'text-rotation': 'autorotate',
                    'text-background-color': '#f6f6f6', // Same as graph background
                    'text-background-opacity': 1
                }
            },

            {
                selector: ':selected',
                style: {
                    'background-color': 'yellow',
                    'line-color': 'red'
                }
            }

        ],  // END of style


        layout: {
            name: 'circle',   // OR: 'grid'
            rows: 1
        }

    });


    cy.add([
        { data: { id: 4, label: 'import' , name: 'Restaurants' }, position: {x: 80, y: 100} }
    ]);


    cy.add([
        { data: { id: 5, label: 'SOME_OTHER_LABEL' , name: 'Mr. Node' }, position: {x: 80, y: 200} }
    ]);


    cy.$('#val').select();


    cy.on('click', 'node', function(ev) {
        var node = ev.target;
        console.log(node.position());
        }
    );


    /* -----------------  SUPPORT FUNCTIONS  ---------------- */

    function node_color_f(ele)
    /*  Determine and return the color to use for the inside of the node
        passed as argument (as a graph element)
     */
    {
        //console.log(color_mapping);
        //console.log(ele.data("label"));
        const label = ele.data("label");  // Counterpart of Neo4j node label (but only 1 for now)
        if (label in color_mapping)
            return color_mapping[label];
        else
            return '#FFFFFF';       // Default color
    }


    function node_border_color_f(ele)
    /*  Determine and return the color to use for the border of the node
        passed as argument (as a graph element).
        The relationship between the interior and edge color emulates
        the Neo4j browser interface (same Hue/Saturation but less Luminosity)
     */
    {
        //console.log(color_mapping);
        //console.log(ele.data("label"));
        const interior_color = node_color_f(ele);
        console.log(interior_color);
        //const c = d3.color(interior_color);
        const c = d3.hsl(interior_color);
        console.log(c);
        const c_new = c.darker(0.635).formatHex();  // This value emulates the Neo4j browser interface
        console.log(c_new);
        //return interior_color;
        return c_new;
    }
</script>

</body>
</html>