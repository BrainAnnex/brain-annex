{#  Flask-passed parameters:
        content_items
        category_id
        category_name
        subcategories

    STATIC-webpage version of the viewer page for a list of Content Items (the list is specified in Flask parameter: content_items)

    :param content_items:   A list of dictionaries
                        EXAMPLE:
                        [{'schema_code': 'i', 'item_id': 1,'width': 450, 'basename': 'my_pic', 'suffix': 'PNG', pos: 0},
                         {'schema_code': 'h', 'item_id': 1, 'text': 'Overview', pos: 10},
                         {'schema_code': 'n', 'item_id': 1', basename': 'overview', 'suffix': 'htm', pos: 20}
                        ]

    ----------------------------------------------------------------------------------
	MIT License

    Copyright (c) 2021 Julian A. West

    This file is part of the "Brain Annex" project (https://BrainAnnex.org)

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
	----------------------------------------------------------------------------------

 #}


<html lang="en">
<head>
    <title>Documentation</title>

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/page_viewer.css">
    <link type="text/css" rel="stylesheet" href="/navigation/static/navbar_top.css">

    <!-- Plugin-specific styling -->
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/controls/controls.css">

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/headers/headers.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/images/images.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/notes/notes.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/codedocs/codedocs.css">
    <link type="text/css" rel="stylesheet" href="/BA/pages/static/vue_components/PLUGINS/records/records.css">

    <script src="/BA/pages/static/Vue2/vue2.js"></script>   <!-- Vue.js (version 2) -->
    <script src="/BA/api/static/server_communication.js"></script>
</head>


<body>


<div id="vue-root">   <!-- Container for VUE COMPONENTS  : considered the ROOT of the components below-->



<!--   The "scroll-canvas" is the main part of the page,
       incl. the navbar at the top, but exclusive of the fixed left sidebar -->
<div v-bind:class="{ 'scroll-canvas': show_left_sidebar, 'scroll-canvas--collapsed-left': !show_left_sidebar }">




<div v-show='show_left_sidebar' class='sidebar-left'> 	<!-- START OF sidebar-left : used for Table of Contents -->


<!-- Page navigation section -->
<span style='color:gray'>PAGE CONTENTS</span><br>

<a href='#' style='font-size:14px; font-weight:bold'>TOP</a><br>

<div class="page-toc">
    <template v-for="item in content_array">
        <p v-if="item.schema_code == 'h'" class="header"><br><a v-bind:href="'#h_' + item.item_id">[[item.text]]</a><br></p>
        <p v-if="item.schema_code == 'cd'">&nbsp; &diams; <a v-bind:href="'#' + item.schema_code + '_' + item.item_id" v-bind:title="item.name">[[item.name]]</a><br></p>
    </template>
</div>      <!-- END of page-toc -->

</div>		<!-- END OF sidebar-left-->

<!-- Collapsed version of sidebar-left -->
<div v-show='!show_left_sidebar' class='sidebar-left-collapsed'>
    <img v-on:click='show_left_sidebar = true' src='/BA/pages/static/graphics/thin_right_arrow_32.png' align='left'
         title='Click to expand sidebar' alt='Click to expand sidebar'>
</div> 	 <!-- END of Collapsed version of sidebar-left -->




<div class='lightbox'>


{#  Uncomment for debugging (to view some of the Flask-passed parameters)
<br>{{content_items}}<br><br>
 #}

{% if category_name %}
<p class="headline">{{category_name}}</p>
{% endif %}


{% if subcategories %}
<div class='subsections'>
    <span class='subsections-label'>Subsections: </span>
    {% for subcategory in subcategories %}
        {% if loop.index == 1 %}
        <span class='subsection-link'><a href="/BA/pages/viewer/{{subcategory['id']}}">{{subcategory['name']}}</a></span>
        {% else %}
        <span class='subsection-link'>&nbsp; &diams; &nbsp;<a href="/BA/pages/viewer/{{subcategory['id']}}">{{subcategory['name']}}</a></span>
        {% endif %}
    {% endfor %}
</div>
<br>
{% endif %}


{# Give notice if no Content Items were passed #}
{% if (content_items | count == 0) and (not subcategories) %}
    <p style="margin-top:50px; color:#888">NO CONTENT ITEMS FOUND IN THE DATABASE : you may need to re-import them</p>
{% endif %}




<!-- For each Content Item on this page, make use of the appropriate Vue component (picked dynamically)
     Handle here some UI operations common to all types, such as moves around the page.
     Type-specific operations, such as editing, are handled by the individual components

     v-bind:key Used to provide unique identifiers for each component
     v-bind:is  Specifies which component to use, based on the type of the Content Item

     Props (arguments) passed to the components
            v-bind:item_data="item"
            v-bind:allow_editing="expose_controls"
            v-bind:category_id="category_id"

     Intercept various SIGNALS from descendant components:
        Originating in grandchildren:
            v-on:delete-content-item
            v-on:move-up-content-item
            v-on:move-down-content-item
        Originating in children:
            v-on:cancel-edit
     -->
<component v-for="item in content_array"
            v-bind:key="item.schema_code + item.item_id + item.pos"
            v-bind:is="plugin_component_name(item)"
            v-bind:item_data="item"
            v-bind:allow_editing="expose_controls"
            v-bind:category_id="category_id"

            v-on:delete-content-item="delete_content_item(item)"
            v-on:move-up-content-item="move_up_content_item(item)"  v-on:move-down-content-item="move_down_content_item(item)"
            v-on:cancel-edit="cancel_edit(item)"
>
</component>


<br><br>


</div>  <!--  ~~~~~~~~~~~~~~~~~~~~~  END of Vue root element  ~~~~~~~~~~~~~~~~~~~~~  -->



<!-- Icon to scroll to top of page -->
<a id="to_top" href="javascript:;" onclick="window.scrollTo(0, 0)">
    <img src="/BA/pages/static/graphics/to_top_80.png" width="40" height="40"
         alt="Scroll to TOP of page" title="Scroll to TOP of page">
</a>




</div>	<!-- END OF lightbox -->

</div>	<!-- END OF scroll-canvas -->





<!-- Vue-related code (and other JS).  This must appear AFTER the Vue-containing elements
  -->
<script src="/BA/pages/static/vue_components/controls/controls.js"></script>

<script src="/BA/pages/static/vue_components/PLUGINS/headers/headers.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/images/images.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/notes/notes.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/codedocs/codedocs.js"></script>
<script src="/BA/pages/static/vue_components/PLUGINS/records/records.js"></script>


<script>
// Instantiation must come after the component definition
new Vue({
    el: '#vue-root',

    delimiters: ['[[', ']]'] ,  // Changing delimiters: here we are requesting double SQUARE brackets

    data: {     // Global data for the whole page (Vue root element).  This is the handover of data from Flask to Vue
        content_array: {{content_items | tojson(indent=4)}},  // Array containing item-data objects
                                                    // EXAMPLE: [{"item_id":5,"schema_code":"h","pos":0,"text":"GENERAL METHODS"},
                                                    //           {"basename":"mypix","schema_code":"i","item_id":8,"pos":50,"suffix":"png"}]
        expose_controls: false,         // If true, the editing controls of the various Content Items are revealed
        category_id: {{category_id}},   // Integer
        show_left_sidebar: true
    },


    methods:  {
        cancel_edit(item)
        {
            console.log(`Root module received signal to abort editing operation for item '${item.schema_code}' , id ${item.item_id} , pos ${item.pos}`);
            if (item.item_id == -1)  {
                // If we're aborting the edit of a new Content Item, delete it from the page
                index = this.locate_item_pos(item.schema_code, item.item_id, item.pos);
                console.log(`Aborting the edit of a NEW Content Item, whose index position on the page is ${index}`);
                this.content_array.splice(index, 1);    // It modifies the array, to take out 1 element in position index
            }
        },


        add_new_item(schema_code)
        // Add a new Content Item of the specified type, placed at the bottom of the page (past the last Item)
        {
            if (this.content_array.length == 0)
                new_pos = 1;    // Arbitrary position value in case this is the first item attached to the page
            else {
                const last_element = this.content_array.slice(-1)[0];
                new_pos = last_element.pos + 10;  // To be comfortably past the last Item, position-wise
            }

            console.log(`Adding new Content Item of type ${schema_code} at the bottom of page, at position ${new_pos}`);

            const blank_record = {"item_id": -1, "schema_code": schema_code, "pos": new_pos};   // -1 by convention indicates a NEW item

            this.content_array.push(blank_record);  // Insert the new blank Item at the end of the page's Content Items
        },


        delete_content_item(item)
        // Delete from the page (TODO: and from the database) the specified Content Item
        {
            console.log(`Root element received signal to delete content item of type '${item.schema_code}' , id ${item.item_id}`);
            const index = this.locate_item(item.schema_code, item.item_id);
            console.log(`Content item located in position ${index}`);

            if (index == -1)  {
                alert("Unable to locate the element to delete. Maybe a change was made on a separate tab...  Try refreshing page");
                return;
            }

            // Pop up a confirmation dialog box
            var confirm_val = confirm("Confirm DELETE?");

            if  (confirm_val == false)  {
                // The CANCEL option was selected by the user in the confirmation dialog box
                //alert("Deletion aborted");
                //if (contentElement)  {		// Restore the original background color, if one was located
                    //contentElement.style.backgroundColor = originalBackgroundColor;
                //}
                return;
            }

            this.content_array.splice(index, 1);  // It modifies the array, to take out 1 element in position index
        },


        move_up_content_item(item)
        //
        {
            const schema_code = item.schema_code;
            const item_id = item.item_id;

            console.log(`Root element received signal to move UP the content item of type '${schema_code}' , id ${item_id}`);

            const number_items = this.content_array.length;

            if (number_items == 1)  {
                alert("There is only 1 item!  No action taken");
                return;
            }

            const i = this.locate_item(schema_code, item_id);     // Locate the specified Content Item in the array of Content Items

            if (i == -1) {
                alert(`Item type '${schema_code}' , id ${item_id} NOT found. Maybe was deleted in another browser tab? No action taken`);
                return;
            }

            if (i == 0)  {
                alert("Item is already at the top: no action taken");
                return;
            }

            // Swap the current Item with the one before it
            const old_pos = this.content_array[i].pos;
            this.content_array[i].pos = this.content_array[i-1].pos;
            this.content_array[i-1].pos = old_pos;

            this.sort_all_items();      // Re-sort array of Content Items

        }, // move_up_content_item


        move_down_content_item(item)
        //
        {
            const schema_code = item.schema_code;
            const item_id = item.item_id;

            console.log(`Root element received signal to move DOWN the content item of type '${item.schema_code}' , id ${item.item_id}`);

            const number_items = this.content_array.length;

            if (number_items == 1)  {
                alert("There is only 1 item!  No action taken");
                return;
            }

            const i = this.locate_item(schema_code, item_id);     // Locate the specified Content Item in the array of Content Items

            if (i == -1) {
                alert(`Item type '${schema_code}' , id ${item_id} NOT found. Maybe was deleted in another browser tab? No action taken`);
                return;
            }

            if (i == number_items - 1)  {
                alert("Item is already at the bottom: no action taken");
                return;
            }

            // Swap the current Item with the one after it
            const old_pos = this.content_array[i].pos;
            this.content_array[i].pos = this.content_array[i+1].pos;
            this.content_array[i+1].pos = old_pos;

            this.sort_all_items();      // Re-sort array of Content Items

        }, // move_down_content_item


        locate_item(schema_code, item_id)
        /*  Helper function, to locate the specified Content Item in the array of Content Items.
            If found, return its index in the array; otherwise, return -1
         */
        {
            //console.log(`Attempting to locate content item of type '${schema_code}' , id ${item_id}`);

            const number_items = this.content_array.length;

            for (var i = 0; i < number_items; i++) {
                if (this.content_array[i].schema_code == schema_code  &&  this.content_array[i].item_id == item_id)
                    return i;          //  Found it
            }

            return -1;    // Didn't find it
        },

        locate_item_pos(schema_code, item_id, pos)
        /*  Same as locate_item(), but also requiring a match on position
         */
        {
            //console.log(`Attempting to locate content item of type '${schema_code}' , id ${item_id}, pos ${pos}`);

            const number_items = this.content_array.length;

            for (var i = 0; i < number_items; i++) {
                if (this.content_array[i].schema_code == schema_code  &&
                    this.content_array[i].item_id == item_id  &&
                    this.content_array[i].pos == pos)
                    return i;          //  Found it
            }

            return -1;    // Didn't find it
        },


        plugin_component_name(item)
        // Compose the name of the plugin-provided Vue component to handle the given item (based on its type)
        {
            // TODO: make sure that item.schema_code is known, or return a special "generic" type
            return "vue-plugin-" + item.schema_code;
        },


        sort_all_items()
        // Re-arrange the ordering of the Content Items, based on their "pos" attributes
        {
            //alert("sorting!");
            this.content_array.sort( function(a, b) {return a.pos > b.pos} );
        }

    } // METHODS

});
</script>


</body>
</html>