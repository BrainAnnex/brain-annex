<!DOCTYPE html>
{#  Flask-passed parameters:
        current_page, site_pages,
        class_list
 #}

<html lang="en">
<head>
    <title>Data Import</title>

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/brain_annex.css">

    <link type="text/css" rel="stylesheet" href="/navigation/static/horiz_status_bar.css">
    <link type="text/css" rel="stylesheet" href="/navigation/static/navbar_top.css">

    <link type="text/css" rel="stylesheet" href="/BA/pages/static/css/control_panels.css">

    <!-- JavaScript -->
    <script src="/BA/pages/static/Vue2/vue2.js"></script>   <!-- Vue.js (version 2) -->
    <script src="/BA/api/static/server_communication.js"></script>
</head>


<body>

<div id="vue-root">   <!-- Container for VUE COMPONENTS : the ROOT of the components below -->

{# HORIZONTAL STATUS BAR (fixed at the top) #}
{% include "horiz_status_bar.htm" %}

<div class="menu-wrapper">
    {# TOP NAVIGATION BAR #}
    {% include "navbar_top.htm" %}
</div>

<a href='/BA/pages/admin'>Admin</a> &raquo; Data Import

<h2 class="page-title">Data Import</h2>


<br>

<div class="content-block">
    <div class="content-block-title">JSON Data Import</div>

    <div>
        <p>
            JSON data file to parse :
            <input type="file" @change="upload_file">
        </p>


        Use Schema (recommended) <input type="radio" value="SCHEMA"    v-model="use_schema">
        &nbsp;&nbsp;
        or without Schema        <input type="radio" value="NO_SCHEMA" v-model="use_schema"><br><br>

        <template v-if="use_schema=='SCHEMA'">
            <select  v-model="schema_class">
                <option value='-1'>[Choose an existing Class]</option>
                <template v-for="item in all_class_names">
                    <option>[[item]]</option>
                </template>
            </select>

            <label style="color:gray"> schema class to use for the top-level element(s)</label>
        </template>

        <template v-else>
            <input type="text" size="35" v-model="import_root_label">
            <label style="color:gray"> label to use on root node(s) of import</label>
        </template>

        <br>
        <button @click=submit_file style="margin-bottom:15px; margin-top:40px; padding:5px">
            Import JSON data file
            <template v-if="use_schema=='SCHEMA'">using the Schema</template>
            <template v-else>WITHOUT Schema</template>
        </button>

        <!-- Status info -->
        <span v-if="waiting" class="waiting">Performing the upload...</span>
        <span v-bind:class="{'error-message': error, 'status-message': !error }">[[status_message]]</span>

        <p>
            [[server_output]]
        </p>
    </div>
</div>

<!-- UNTESTED:  @change="handleFileUpload( $event )"   -->

<br><br><br>

<div class="content-block">
    <div class="content-block-title">RegEx Data Parse (Experimental!)</div>

    <form enctype="multipart/form-data" action="/BA/api/parse_datafile" method="POST">
        <p>IMPORT data file to parse : <input type="file" name="imported_datafile"></p>
        <p><input type="submit" value="Import data file"></p>
        <input type="hidden" name="return_url" value="/BA/pages/admin">
    </form>
</div>


</div>	<!--  ~~~~~~~~~~~~~~~~~~~~~  END of Vue root element  ~~~~~~~~~~~~~~~~~~~~~  -->



<!--
    Vue components (and other JS).  This must appear AFTER the Vue-containing elements
  -->


<script>
// Instantiation of the ROOT component must come after the definition of the descendant components
new Vue({
    el: '#vue-root',

    delimiters: ['[[', ']]'] ,  // Changing delimiters: requesting double SQUARE brackets, to avoid interfering with Flask

    data: {
        file_to_import: null,

        use_schema: "SCHEMA",                       // Either "SCHEMA" or "NO_SCHEMA"

        all_class_names: {{class_list | tojson}},   // Handover of data from Flask to Vue

        schema_class: -1,                           // Name of schema class to use for the top-level element(s)
        import_root_label: "Import_Root",           // Neo4j label to use on root node(s) of import

        waiting: false,         // Whether any server request is still pending
        error: false,           // Whether the last server communication resulted in error
        status_message: "",     // Message for the user about the status of the last operation (NOT used for "waiting" status)
        server_output: ""

    }, // DATA




    // ----------------------------  METHODS  -----------------------------

    methods:  {

        upload_file(event)
        {
            console.log("In upload_file()");

            this.file_to_import = event.target.files[0];

            console.log("event.target : ", event.target);
            //console.log("event.target.files : ", event.target.files);
            console.log("file_to_import : ", this.file_to_import);
            console.log("file_to_import.name : ", this.file_to_import.name);
        },

        submit_file()
        {
            var url_server = "/BA/api/import_json_file";

            console.log("In submit_file()");

            this.waiting = true;
            this.status_message = "";   // Clear any message from the previous operation
            this.error = false;         // Clear any error from the previous operation
            this.server_output = "";    // Clear any message from the previous operation

            // Initiate asynchronous contact with the server
            ServerCommunication.contact_server_UPLOAD(url_server,
                                                      {file_to_import: this.file_to_import,
                                                       post_obj: {
                                                            use_schema: this.use_schema,
                                                            schema_class: this.schema_class,
                                                            import_root_label: this.import_root_label
                                                       },
                                                       callback_fn: this.finish_upload}
                                                     );
        },


        finish_upload(success, server_payload, error_message)
        {
            console.log("Finalizing the request to upload a JSON file...");
            if (success)  {     // Server reported SUCCESS
                console.log("Server reported success");
                console.log("server_payload : ", server_payload);
                this.status_message = `Operation completed`;
                this.server_output = server_payload;
            }
            else  {             // Server reported FAILURE
                console.log("Server reported failure");
                console.log("error_message : ", error_message);
                this.error = true;
                this.status_message = `FAILED operation: ${error_message}`;
                this.server_output = "";
            }

            // Final wrap-up, regardless of error or success
            this.waiting = false;      // Make a note that the asynchronous operation has come to an end
        },


        prepare_POST_options_upload(post_body)
        {
            const fetch_options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'multipart/form-data'
                    //'Content-Type': 'application/octet-stream'
                    // Note: to be used for uploads
                },
                credentials: 'same-origin',
                body: post_body		// IMPORTANT: as prepare for an upload
            };

            return fetch_options;
        }

    } // METHODS

});
</script>


</body>
</html>