import pytest
from brainannex.cypher_utils import CypherUtils, CypherBuilder



############   For class CypherBuilder   ############

def test_CypherBuilder():

    with pytest.raises(Exception):
        CypherBuilder(internal_id=-123) # Bad ID

    with pytest.raises(Exception):
        CypherBuilder(labels=666)       # Bad labels

    with pytest.raises(Exception):
        CypherBuilder(key_name=666)  # Bad key_name

    with pytest.raises(Exception):
        CypherBuilder(key_name="patient code")     # Missing key_value

    with pytest.raises(Exception):
        CypherBuilder(key_value=0)   # Missing key_name

    with pytest.raises(Exception):
        CypherBuilder(key_name="     ", key_value=0)   # Bad key_name

    with pytest.raises(Exception):
        CypherBuilder(key_name="patient code", key_value=100, properties={"patient code": 100})    # Key name conflict

    with pytest.raises(Exception):
        CypherBuilder(properties="not_a_dict")

    with pytest.raises(Exception):
        CypherBuilder(clause=123)    # Bad clause

    with pytest.raises(Exception):
        CypherBuilder(clause=('n.weight < $max_weight', 222, 333))       # Bad clause

    with pytest.raises(Exception):
        CypherBuilder(clause=('n.weight < $max_weight', 222))    # Bad clause

    with pytest.raises(Exception):
        CypherBuilder(clause=(111, {}))    # Bad clause

    with pytest.raises(Exception):
        CypherBuilder(clause=("    ", {}))    # Bad clause

    with pytest.raises(Exception):
        # Conflict between requested key 'n_par_1' in the clause
        # and the autogenerated key name for the passed properties
        CypherBuilder(properties={"age": 23},
                      clause=('n.weight < n_par_1', {'n_par_1': 100}))

    with pytest.raises(Exception):
        CypherBuilder(properties={"age": 23},
                      clause=('p.weight < p_par_1', {'p_par_1': 100}),
                      dummy_name="p")


    ns = CypherBuilder(internal_id=123,
                       labels="my label", key_name="patient code", key_value=100,
                       properties={"onset age": 23},
                       clause="n.income > 10000", dummy_name="n")

    assert ns.internal_id == 123
    assert ns.labels == "my label"
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == "n.income > 10000"
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    # The presence of the internal_id trumps all other criteria
    assert ns.node == "(n)"
    assert ns.where == "id(n) = 123"
    assert ns.data_binding == {}
    assert ns.cypher == "MATCH (n) WHERE id(n) = 123"


    # Same, but without internal_id
    ns = CypherBuilder(
                   labels="my label", key_name="patient code", key_value=100,
                   properties={"onset age": 23},
                   clause="n.income > 10000", dummy_name="n")

    assert ns.internal_id is None
    assert ns.labels == "my label"
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == "n.income > 10000"
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`my label` {`onset age`: $n_par_1, `patient code`: $n_par_2})"
    assert ns.where == "n.income > 10000"
    assert ns.data_binding == {"n_par_1": 23, 'n_par_2': 100}
    assert ns.cypher == "MATCH (n :`my label` {`onset age`: $n_par_1, `patient code`: $n_par_2}) WHERE (n.income > 10000)"


    ns = CypherBuilder(
                   labels="my label", key_name="patient code", key_value=100,
                   properties={"onset age": 23},
                   clause="p.income > $income_threshold",
                   clause_binding={"income_threshold": 10000},
                   dummy_name="p")

    assert ns.internal_id is None
    assert ns.labels == "my label"
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == "p.income > $income_threshold"
    assert ns.clause_binding == {"income_threshold": 10000}
    assert ns.dummy_node_name == "p"

    assert ns.node == "(p :`my label` {`onset age`: $p_par_1, `patient code`: $p_par_2})"
    assert ns.where == "p.income > $income_threshold"
    assert ns.data_binding == {"income_threshold": 10000, "p_par_1": 23, 'p_par_2': 100}
    assert ns.cypher == "MATCH (p :`my label` {`onset age`: $p_par_1, `patient code`: $p_par_2}) WHERE (p.income > $income_threshold)"
    #print(ns)


    ns = CypherBuilder(
                   labels=("my label 1", "my label 2"),
                   key_name="patient code", key_value=100,
                   properties={"onset age": 23})

    assert ns.internal_id is None
    assert ns.labels == ("my label 1", "my label 2")
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"
    assert ns.where == ""
    assert ns.data_binding == {"n_par_1": 23, 'n_par_2': 100}
    assert ns.cypher == "MATCH (n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"


    ns = CypherBuilder(labels="person", key_name="SSN", key_value=123)
    assert ns.internal_id is None
    assert ns.labels == "person"
    assert ns.key_name == "SSN"
    assert ns.key_value == 123
    assert ns.properties == {}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`person` {`SSN`: $n_par_1})"
    assert ns.where == ""
    assert ns.data_binding == {"n_par_1": 123}
    assert ns.cypher == "MATCH (n :`person` {`SSN`: $n_par_1})"



def test_finalize_dummy_name():

    ns = CypherBuilder(internal_id=123,
                       labels="my label", key_name="patient code", key_value=100,
                       properties={"onset age": 23},
                       clause="n.income > 10000", dummy_name="n")

    ns.finalize_dummy_name("n")     # No change

    assert ns.internal_id == 123
    assert ns.labels == "my label"
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == "n.income > 10000"
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"
    assert ns.node == "(n)"
    assert ns.where == "id(n) = 123"
    assert ns.data_binding == {}
    assert ns.cypher == "MATCH (n) WHERE id(n) = 123"

    with pytest.raises(Exception):
        ns.finalize_dummy_name("dummy")     # Can't change dummy name when a clause is present


    ns = CypherBuilder(
                   labels="my label", key_name="patient code", key_value=100,
                   properties={"onset age": 23},
                   clause="n.income > 10000", dummy_name="n")

    ns.finalize_dummy_name("n")     # No change

    assert ns.internal_id is None
    assert ns.labels == "my label"
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == "n.income > 10000"
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"
    assert ns.node == "(n :`my label` {`onset age`: $n_par_1, `patient code`: $n_par_2})"
    assert ns.where == "n.income > 10000"
    assert ns.data_binding == {"n_par_1": 23, 'n_par_2': 100}
    assert ns.cypher == "MATCH (n :`my label` {`onset age`: $n_par_1, `patient code`: $n_par_2}) WHERE (n.income > 10000)"

    with pytest.raises(Exception):
        ns.finalize_dummy_name("dummy")     # Can't change dummy name when a clause is present


    ns = CypherBuilder(
                   labels=("my label 1", "my label 2"),
                   key_name="patient code", key_value=100,
                   properties={"onset age": 23})

    ns.finalize_dummy_name("n")     # No change

    assert ns.internal_id is None
    assert ns.labels == ("my label 1", "my label 2")
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"
    assert ns.node == "(n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"
    assert ns.where == ""
    assert ns.data_binding == {"n_par_1": 23, 'n_par_2': 100}
    assert ns.cypher == "MATCH (n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"

    ns.finalize_dummy_name("dummy")

    assert ns.internal_id is None
    assert ns.labels == ("my label 1", "my label 2")
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "dummy"
    assert ns.node == "(dummy :`my label 1`:`my label 2` {`onset age`: $dummy_par_1, `patient code`: $dummy_par_2})"
    assert ns.where == ""
    assert ns.data_binding == {"dummy_par_1": 23, 'dummy_par_2': 100}
    assert ns.cypher == "MATCH (dummy :`my label 1`:`my label 2` {`onset age`: $dummy_par_1, `patient code`: $dummy_par_2})"


    ns = CypherBuilder(labels="person", key_name="SSN", key_value=123)

    ns.finalize_dummy_name("n")     # No change

    assert ns.internal_id is None
    assert ns.labels == "person"
    assert ns.key_name == "SSN"
    assert ns.key_value == 123
    assert ns.properties == {}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`person` {`SSN`: $n_par_1})"
    assert ns.where == ""
    assert ns.data_binding == {"n_par_1": 123}
    assert ns.cypher == "MATCH (n :`person` {`SSN`: $n_par_1})"

    ns.finalize_dummy_name("dummy")

    assert ns.internal_id is None
    assert ns.labels == "person"
    assert ns.key_name == "SSN"
    assert ns.key_value == 123
    assert ns.properties == {}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "dummy"

    assert ns.node == "(dummy :`person` {`SSN`: $dummy_par_1})"
    assert ns.where == ""
    assert ns.data_binding == {"dummy_par_1": 123}
    assert ns.cypher == "MATCH (dummy :`person` {`SSN`: $dummy_par_1})"




############   For class CypherUtils   ############

def test_process_match_structure():
    ns = CypherUtils.process_match_structure(handle=123)

    assert ns.internal_id == 123
    assert ns.labels is None
    assert ns.key_name is None
    assert ns.key_value is None
    assert ns.properties == {}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n)"
    assert ns.where == "id(n) = 123"
    assert ns.data_binding == {}
    assert ns.cypher == "MATCH (n) WHERE id(n) = 123"


    ns = CypherBuilder(
                   labels=("my label 1", "my label 2"),
                   key_name="patient code", key_value=100,
                   properties={"onset age": 23})

    new_obj = CypherUtils.process_match_structure(handle=ns, dummy_node_name="FROM")

    assert new_obj.internal_id is None
    assert new_obj.labels == ("my label 1", "my label 2")
    assert new_obj.key_name == "patient code"
    assert new_obj.key_value == 100
    assert new_obj.properties == {"onset age": 23}
    assert new_obj.clause == ""
    assert new_obj.clause_binding == {}
    assert new_obj.dummy_node_name == "FROM"

    assert new_obj.node == "(FROM :`my label 1`:`my label 2` {`onset age`: $FROM_par_1, `patient code`: $FROM_par_2})"
    assert new_obj.where == ""
    assert new_obj.data_binding == {"FROM_par_1": 23, 'FROM_par_2': 100}
    assert new_obj.cypher == "MATCH (FROM :`my label 1`:`my label 2` {`onset age`: $FROM_par_1, `patient code`: $FROM_par_2})"

    # The original "ns" object was left undisturbed
    assert ns.internal_id is None
    assert ns.labels == ("my label 1", "my label 2")
    assert ns.key_name == "patient code"
    assert ns.key_value == 100
    assert ns.properties == {"onset age": 23}
    assert ns.clause == ""
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"
    assert ns.where == ""
    assert ns.data_binding == {"n_par_1": 23, 'n_par_2': 100}
    assert ns.cypher == "MATCH (n :`my label 1`:`my label 2` {`onset age`: $n_par_1, `patient code`: $n_par_2})"


    ns = CypherBuilder(labels="my label", clause="n.income > 10000", dummy_name="n")

    with pytest.raises(Exception):
        CypherUtils.process_match_structure(handle=ns, dummy_node_name="FROM")  # Conflict in dummy name

    new_obj = CypherUtils.process_match_structure(handle=ns, dummy_node_name="n")

    assert new_obj.internal_id is None
    assert new_obj.labels == "my label"
    assert new_obj.key_name is None
    assert new_obj.key_value is None
    assert new_obj.properties == {}
    assert new_obj.clause == "n.income > 10000"
    assert new_obj.clause_binding == {}
    assert new_obj.dummy_node_name == "n"

    assert new_obj.node == "(n :`my label` )"
    assert new_obj.where == "n.income > 10000"
    assert new_obj.data_binding == {}
    assert new_obj.cypher == "MATCH (n :`my label` ) WHERE (n.income > 10000)"

    new_obj.cypher = "SOME JUNK"


    # The original object is left undisturbed
    assert ns.internal_id is None
    assert ns.labels == "my label"
    assert ns.key_name is None
    assert ns.key_value is None
    assert ns.properties == {}
    assert ns.clause == "n.income > 10000"
    assert ns.clause_binding == {}
    assert ns.dummy_node_name == "n"

    assert ns.node == "(n :`my label` )"
    assert ns.where == "n.income > 10000"
    assert ns.data_binding == {}
    assert ns.cypher == "MATCH (n :`my label` ) WHERE (n.income > 10000)"


    ns = CypherBuilder(labels="my label",
                       clause="n.income > $min_income", clause_binding={"min_income": 10000},
                       dummy_name="n")

    new_obj = CypherUtils.process_match_structure(handle=ns)

    assert new_obj.internal_id is None
    assert new_obj.labels == "my label"
    assert new_obj.key_name is None
    assert new_obj.key_value is None
    assert new_obj.properties == {}
    assert new_obj.clause == "n.income > $min_income"
    assert new_obj.clause_binding == {"min_income": 10000}
    assert new_obj.dummy_node_name == "n"

    assert new_obj.node == "(n :`my label` )"
    assert new_obj.where == "n.income > $min_income"
    assert new_obj.data_binding == {"min_income": 10000}
    assert new_obj.cypher == "MATCH (n :`my label` ) WHERE (n.income > $min_income)"



def test_valid_internal_id():
    assert CypherUtils.valid_internal_id(23) == True
    assert CypherUtils.valid_internal_id(0) == True
    assert CypherUtils.valid_internal_id(-1) == False
    assert CypherUtils.valid_internal_id("a8502fc82") == True
    assert CypherUtils.valid_internal_id([2,3]) == False



def test_assert_valid_internal_id():
    CypherUtils.assert_valid_internal_id(23)
    CypherUtils.assert_valid_internal_id(0)
    CypherUtils.assert_valid_internal_id("a8502fc82")

    with pytest.raises(Exception):
        CypherUtils.assert_valid_internal_id(-1)

    with pytest.raises(Exception):
        CypherUtils.assert_valid_internal_id([2,3])



def test_prepare_labels():
    lbl = None
    assert CypherUtils.prepare_labels(lbl) == ""

    lbl = ""
    assert CypherUtils.prepare_labels(lbl) == ""

    lbl = "client"
    assert CypherUtils.prepare_labels(lbl) == ":`client`"

    lbl = ["car", "car manufacturer"]
    assert CypherUtils.prepare_labels(lbl) == ":`car`:`car manufacturer`"



def test_prepare_where():
    assert CypherUtils.prepare_where("") == ""
    assert CypherUtils.prepare_where("      ") == ""
    assert CypherUtils.prepare_where([]) == ""
    assert CypherUtils.prepare_where([""]) == ""
    assert CypherUtils.prepare_where(("  ", "")) == ""

    wh = "n.name = 'Julian'"
    assert CypherUtils.prepare_where(wh) == "WHERE (n.name = 'Julian')"

    wh = ["n.name = 'Julian'"]
    assert CypherUtils.prepare_where(wh) == "WHERE (n.name = 'Julian')"

    wh = ("p.key1 = 123", "   ",  "p.key2 = 456")
    assert CypherUtils.prepare_where(wh) == "WHERE (p.key1 = 123 AND p.key2 = 456)"

    with pytest.raises(Exception):
        assert CypherUtils.prepare_where(123)    # Not a string, nor tuple, nor list



def test_dict_to_cypher():
    d = {'since': 2003, 'code': 'xyz'}
    assert CypherUtils.dict_to_cypher(d) == ('{`since`: $par_1, `code`: $par_2}', {'par_1': 2003, 'par_2': 'xyz'})

    d = {'year first met': 2003, 'code': 'xyz'}
    assert CypherUtils.dict_to_cypher(d) == ('{`year first met`: $par_1, `code`: $par_2}', {'par_1': 2003, 'par_2': 'xyz'})

    d = {'year first met': 2003, 'code': 'xyz'}
    assert CypherUtils.dict_to_cypher(d, prefix="val_") == ('{`year first met`: $val_1, `code`: $val_2}', {'val_1': 2003, 'val_2': 'xyz'})

    d = {'cost': 65.99, 'code': 'the "red" button'}
    assert CypherUtils.dict_to_cypher(d) == ('{`cost`: $par_1, `code`: $par_2}', {'par_1': 65.99, 'par_2': 'the "red" button'})

    d = {'phrase': "it's ready!"}
    assert CypherUtils.dict_to_cypher(d) == ('{`phrase`: $par_1}', {'par_1': "it's ready!"})

    d = {'phrase': '''it's "ready"!'''}
    assert CypherUtils.dict_to_cypher(d) == ('{`phrase`: $par_1}', {'par_1': 'it\'s "ready"!'})

    d = None
    assert CypherUtils.dict_to_cypher(d) == ("", {})

    d = {}
    assert CypherUtils.dict_to_cypher(d) == ("", {})
